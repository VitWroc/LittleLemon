use littlelemonDB;

# maximum ordered quantity in the Orders table
drop procedure if exists GetMaxQuantity;
delimiter //
create procedure GetMaxQuantity()
begin
	select 
		max(quantity) 
	from orders;
end //

call GetMaxQuantity();

#  GetOrderDetail Task 

prepare GetOrderDetail from 'select * from orders where order_id = ?';

set @id = 1
execute GetOrderDetail using @id;

#  CancelOrder procedure  . 

drop procedure if exists CancelOrder;
delimiter //
create procedure CancelOrder(in id int)
begin
	declare message varchar(255);
    	delete from orders
	where order_id = id;
    
    set message = concat('Order ', id, ' is canceled');
        select message as 'Confirmation';
end //

call CancelOrder(5);

#  CheckBooking procedure.
drop procedure if exists CheckBooking;
delimiter //
create procedure CheckBooking(in booking_date_in date, in table_number_in int)
begin
    declare message varchar(255);

    select count(*) into @table_num
    from bookings
    where booking_date = booking_date_in and table_number = table_number_in;

    if (@table_num > 0) then
        set message = concat('Table ', table_number_in, ' is already booked.');
    else
        set message = concat('Table ', table_number_in, ' is available.');
    end if;

    select message as 'Booking Status';
end //

call CheckBooking('2023-10-06', 7);

# verify a booking, and decline any  reservations for tables that are already booked under another name. 
drop procedure if exists addbooking;
delimiter //
create procedure AddBooking (in booking_id_in int, in booking_date_in date, in table_number_in int)
begin
	declare message varchar(50);
    start transaction;
    
    select count(*) into @table_count
    from bookings
    where booking_date = booking_date_in and table_number = table_number_in;

    if (@table_count = 0) then
        insert into bookings (booking_id, booking_date, table_number)
        values 
        (booking_id_in, booking_date_in, table_number_in);
        commit;
        set message = 'Booking completed.';
    else
		rollback;
        set message = 'Conflicting booking.';
    end if;
    
    select message as 'Booking Status';
end //

call AddBooking(4, '2023-10-07', 9);

#   AddBooking procedure
drop procedure if exists AddBooking;
delimiter //
create procedure AddBooking(in booking_id_in int, in booking_date_in date, in table_number_in int)
begin
	insert into bookings (booking_id, booking_date, table_number)
	values 
	(booking_id_in, booking_date_in, table_number_in);
    
    select 'New booking added' as Confirmation;
end //

call AddBooking(5, '2023-10-07', 4);

#  UpdateBooking 
drop procedure if exists UpdateBooking;
delimiter //
create procedure UpdateBooking(in booking_id_in int, in booking_date_new_in date)
begin
	update bookings
    set booking_date = booking_date_new_in
    where booking_id = booking_id_in;
    
    select concat('Updated # ', booking_id_in, '; ', booking_date_new_in) as Confirmation;
end //

call UpdateBooking(5, '2023-10-07');

#  CancelBooking procedure 
drop procedure if exists CancelBooking;
delimiter //
create procedure CancelBooking(in booking_id_in int)
begin
	delete from bookings
    where booking_id = booking_id_in;
    
    select concat('Deleted # ', booking_id_in) as Confirmation;
end //

call CancelBooking(5);
