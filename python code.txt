# First task 

from mysql.connector.pooling import MySQLConnectionPool

from mysql.connector import Error
dbconfig={"database":"little_lemon_db", "user":"root", "password":""}
try:
    pool = MySQLConnectionPool(pool_name="pool_b", pool_size=2, host='localhost', **dbconfig)
    print("The connection pool is created with name:", pool.pool_name)
    print("The pool size is:", pool.pool_size)
except Error as err:
    print("Error Code:", err.errno)
    print("Error Message:", err.msg)
# 2-nd task 
connection1 = pool.get_connection()
cursor1=connection1.cursor()

booking1="""INSERT INTO Bookings 
(TableNo, GuestFirstName, GuestLastName, BookingSlot, EmployeeID)
VALUES
(8,'Anees','Java','18:00:00',6);"""

cursor1.execute(booking1)
connection1.commit()
print("""A new booking is added in the "Bookings" table.""")

# Connect the second guest.
connection2 = pool.get_connection()
cursor2=connection2.cursor()

booking2="""INSERT INTO Bookings 
(TableNo, GuestFirstName, GuestLastName, BookingSlot, EmployeeID)
VALUES
(5, 'Bald','Vin','19:00:00',6);"""

cursor2.execute(booking2)
connection2.commit()
print("""A new booking is added in the "Bookings" table.""")

# Adding a new connection to connect the third user.

import mysql.connector as connector
try:
    connection3 = pool.get_connection()
    print("The guest is connected")
except:
    print("Adding new connection in the pool.")
        
    # Create a connection
    connection=connector.connect(user="root",password="")
    
    # Add the connection into the pool
    pool.add_connection(cnx=connection)
    print("A new connection is added in the pool.\n")
        
    connection3 = pool.get_connection()
    print("'connection3' is added in the pool.")
    
# Connect the third guest 
cursor3=connection3.cursor()

booking3="""INSERT INTO Bookings 
(TableNo, GuestFirstName, GuestLastName, BookingSlot, EmployeeID)
VALUES
(12, 'Jay','Kon','19:30:00',6);"""

cursor3.execute(booking3)
connection3.commit()
print("""A new booking is added in the "Bookings" table.""")

# You can only return two connections back to the pool as the pool_size=2.
# Closing all connections and using try-except to print the pool error if the pool is already full.

from mysql.connector import Error
for connection in [connection1, connection2, connection3]:
    try:
        connection.close()
        print("Connection is returned to the pool")
    except Error as err:
        print("\nConnection can't be returned to the pool")
        print("Error Code:", err.errno)
        print("Error message:", err.msg)

# 3 task 
print("Getting a connection from the pool.")
connection = pool.get_connection()

print("""The object "connection" is created with a connection link from the pool_a""")
print("""Creating a cursor object to communicate with the database.""")

cursor=connection.cursor()
print("""The cursor object "cursor" is created.""")
report_1 = """
SELECT Name, EmployeeID 
FROM Employees
WHERE Role = 'Manager';
"""

cursor.execute(report_1)

results=cursor.fetchall()

columns=cursor.column_names

print(columns)
for result in results:
    print(result)
report_2 = """
SELECT Name, Role
FROM Employees
WHERE Annual_Salary = (SELECT MAX(Annual_Salary) FROM Employees);
"""

cursor.execute(report_2)

results=cursor.fetchall()

columns=cursor.column_names

print(columns)
for result in results:
    print(result)
report_3 = """
SELECT COUNT(BookingID) AS number_of_guests
FROM Bookings
WHERE BookingSlot BETWEEN '18:00:00' AND '20:00:00';
"""

cursor.execute(report_3)

results=cursor.fetchall()

columns=cursor.column_names

print(columns)
for result in results:
    print(result)
report_4 = """
SELECT CONCAT(Bookings.GuestFirstName, " ", Bookings.GuestLastName) AS GuestFullName, Bookings.BookingID
FROM Bookings
LEFT JOIN Employees 
ON Employees.EmployeeID = Bookings.EmployeeID
WHERE Employees.Role = "Receptionist"
ORDER BY Bookings.BookingSlot DESC;
"""

print("The following guests are waiting to be seated:")

cursor.execute(report_4)

results=cursor.fetchall()

columns=cursor.column_names

print(columns)
for result in results:
    print(result)

# 4 task 
create_rep = """
CREATE PROCEDURE BasicSalesReport()
BEGIN
SELECT SUM(BillAmount) AS Total_sales,
AVG(BillAmount) AS Average_sale,
MIN(BillAmount) AS Min_bill_paid,
MAX(BillAmount) AS Max_bill_paid
FROM Orders;
END
"""
cursor.execute(create_rep)
cursor.callproc('BasicSalesReport')

results = next(cursor.stored_results())
dataset = results.fetchall()
for column_id in cursor.stored_results():
    cols = [column[0] for column in column_id.description]
for data in dataset:
    print('\t', cols[0], ':', data[0])
    print('\t', cols[1], ':', data[1])
    print('\t', cols[2], ':', data[2])
    print('\t', cols[3], ':', data[3])
# 5 task 
connection = pool.get_connection()
cursor = connection.cursor(buffered=True)
NEW_bookings = """
SELECT Bookings.BookingSlot,
CONCAT(Bookings.GuestFirstName," ", Bookings.GuestLastName) AS Guest_Name,
Employees.Name AS Emp_Name,
Employees.Role AS Emp_Role
FROM Bookings
INNER JOIN Employees
ON Bookings.EmployeeID = Employees.EmployeeID
ORDER BY Bookings.BookingSlot;
"""
cursor.execute(NEW_bookings)
results = cursor.fetchmany(size=3)
for result in results:
    print("\nBookingSlot :", result[0])
    print("\tGuest_name :", result[1])
    print("\tAssigned to :", result[2],"[{}]".format(result[3]))

if connection.is_connected():
    cursor.close()
    print("The cursor is closed.")
    connection.close()
    print("MySQL connection is closed.")
else:
    print("Connection is already closed")
